/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// Breadth-first-search using a queue
class Solution {
public:
    int maxDepth(TreeNode* root) {
        std::queue<TreeNode*> node_queue;
        node_queue.push(root);
        
        int level = 0;
        if (!root) return level;
        while (!node_queue.empty()){
            for(int i=0; i<node_queue.size(); i++){
                TreeNode* node = node_queue.front();
                node_queue.pop();
                if (node->left){
                    node_queue.push(node->left);
                }
                if (node->right){
                    node_queue.push(node->right);
                }
            }
             level ++;
        }
        return level;
    }
};
