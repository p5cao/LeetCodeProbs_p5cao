/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

// Solution 1: inorder traversal and binary search (sorted array)
class Solution {
public:
    vector<int> numbers;
    void inorder(TreeNode* root){
        if(!root) return;
        inorder(root->left);
        numbers.push_back(root -> val);
        inorder(root->right);
    }
    bool findTarget(TreeNode* root, int k) {
        inorder(root);
        // for (int i = 0; i < numbers.size(); i++) {
        // cout << numbers[i];}
        //apply 2 sum lookup on the array
        //if (numbers.empty()) return false; 
        int l = 0;
        int r = numbers.size() -1;
        while (l<r){
            int sum = numbers[l] + numbers[r];
            if (sum == k) return true;
            else if(sum > k) r--;
            else if(sum < k) l++;
        }
        return false;
    }
};
